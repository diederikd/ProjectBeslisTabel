package Beslistabel.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.table.runtime.TableModelFactory;
import jetbrains.mps.lang.editor.table.runtime.TableModel;
import jetbrains.mps.lang.editor.table.runtime.AbstractTableModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.log4j.Level;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.editor.table.runtime.EditorCell_Table;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class Regelgroep_Tabel_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"ContextTaal.editor.PresentatieRegels.Tabel"});
  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_j8incd_a(editorContext, node);
  }
  private EditorCell createCollection_j8incd_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_j8incd_a");
    editorCell.setBig(true);
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createCollection_j8incd_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_j8incd_b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_j8incd_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_j8incd_d0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_j8incd_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_j8incd_a0");
    editorCell.addEditorCell(this.createConstant_j8incd_a0a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_j8incd_b0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_j8incd_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Regelgroep ");
    editorCell.setCellId("Constant_j8incd_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_j8incd_b0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_j8incd_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_j8incd_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_j8incd_c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_j8incd_c0");
    editorCell.addEditorCell(this.createTable_j8incd_a2a(editorContext, node));
    return editorCell;
  }
  private EditorCell createTable_j8incd_a2a(EditorContext editorContext, SNode node) {
    TableModelFactory creator = new TableModelFactory() {
      public TableModel createTableModel(final SNode node, final EditorContext editorContext) {
        return new AbstractTableModel() {
          @Override
          public int getColumnCount() {
            return 1 + ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).count();
          }
          @Override
          public int getRowCount() {
            Integer numberOfRegels = ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).count();
            Integer rcVoorwaarden = ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).count() + Sequence.fromIterable(SNodeOperations.ofConcept(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).translate(new ITranslator2<SNode, SNode>() {
              public Iterable<SNode> translate(SNode it) {
                return SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbaL, 0x7b09cf0db9d86bc9L, "voorwaarden"));
              }
            }), MetaAdapterFactory.getConcept(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbbL, "RegelTaal.structure.Voorwaarde"))).count() + 1;

            Integer rcOperands;
            List<SNode> operands = new ArrayList<SNode>();
            for (SNode regel : ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels")))) {
              for (SNode voorwaarde : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(regel, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbaL, 0x7b09cf0db9d86bc9L, "voorwaarden")), MetaAdapterFactory.getConcept(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbbL, "RegelTaal.structure.Voorwaarde")))) {
                SNode operand = (SNode) SLinkOperations.getTarget(voorwaarde, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbbL, 0x5c5bf80e46c3b9d9L, "operand"));
                if (!(ListSequence.fromList(operands).contains(operand)) && operand != null && SPropertyOperations.getString(operand, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) != null) {
                  ListSequence.fromList(operands).addElement(operand);
                }
              }
            }

            rcOperands = ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).count() + ListSequence.fromList(operands).count() + 1;
            if (LOG.isEnabledFor(Level.WARN)) {
              LOG.warn("rowcount operands " + rcOperands.toString());
            }
            if (LOG.isEnabledFor(Level.WARN)) {
              LOG.warn("rowcount voorwaarden " + rcVoorwaarden.toString());
            }

            return rcVoorwaarden;
          }
          @Override
          public SNode getValueAt(int row, int column) {
            Integer r = row;
            Integer c = column;
            if (LOG.isEnabledFor(Level.WARN)) {
              LOG.warn("Row " + r.toString() + " and column " + c.toString());
            }
            List<SNode> regels = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"));
            List<SNode> voorwaarden = new ArrayList<SNode>();
            for (SNode regel : ListSequence.fromList(regels)) {
              for (SNode voorwaarde : ListSequence.fromList(SNodeOperations.getNodeDescendants(regel, MetaAdapterFactory.getConcept(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbbL, "RegelTaal.structure.Voorwaarde"), false, new SAbstractConcept[]{}))) {
                ListSequence.fromList(voorwaarden).addElement(voorwaarde);
              }
            }

            List<SNode> operands = new ArrayList<SNode>();
            for (SNode regel : ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels")))) {
              for (SNode voorwaarde : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(regel, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbaL, 0x7b09cf0db9d86bc9L, "voorwaarden")), MetaAdapterFactory.getConcept(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbbL, "RegelTaal.structure.Voorwaarde")))) {
                SNode operand = (SNode) SLinkOperations.getTarget(voorwaarde, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbbL, 0x5c5bf80e46c3b9d9L, "operand"));
                if (!(ListSequence.fromList(operands).contains(operand)) && operand != null && SPropertyOperations.getString(operand, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) != null) {
                  ListSequence.fromList(operands).addElement(operand);
                }
              }
            }


            if (row == 0 && column > 0) {
              return ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).getElement(column - 1);
            }
            if (row > 0 && column > 0) {
              if (row > 0 && (row > ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).count())) {
                if ((column - 1) == row - ListSequence.fromList(voorwaarden).count() - 1) {
                  return SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).getElement(row - ListSequence.fromList(voorwaarden).count() - 1), MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbaL, 0x1878635738437caaL, "modaliteit"));
                }
              }
              if (row > 0 && (row <= ListSequence.fromList(voorwaarden).count())) {
                List<SNode> referentievoorwaarden = new ArrayList<SNode>();
                for (SNode voorwaardeReferentie : ListSequence.fromList(SNodeOperations.getNodeDescendants(ListSequence.fromList(regels).getElement(column - 1), MetaAdapterFactory.getConcept(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbdL, "RegelTaal.structure.VoorwaardeReferentie"), false, new SAbstractConcept[]{}))) {
                  if (LOG.isEnabledFor(Level.WARN)) {
                    LOG.warn(SPropertyOperations.getString(SLinkOperations.getTarget(voorwaardeReferentie, MetaAdapterFactory.getReferenceLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbdL, 0x7b09cf0db9d86bbeL, "voorwaarde")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " ref");
                  }
                  ListSequence.fromList(referentievoorwaarden).addElement(SLinkOperations.getTarget(voorwaardeReferentie, MetaAdapterFactory.getReferenceLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbdL, 0x7b09cf0db9d86bbeL, "voorwaarde")));
                }
                if (ListSequence.fromList(referentievoorwaarden).contains(ListSequence.fromList(voorwaarden).getElement(row - 1))) {
                  return SLinkOperations.getTarget(ListSequence.fromList(voorwaarden).getElement(row - 1), MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbbL, 0x187863573844154aL, "operator"));
                }
                if (ListSequence.fromList(SLinkOperations.getChildren(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).getElement(column - 1), MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbaL, 0x7b09cf0db9d86bc9L, "voorwaarden"))).contains(ListSequence.fromList(voorwaarden).getElement(row - 1))) {
                  return SLinkOperations.getTarget(ListSequence.fromList(voorwaarden).getElement(row - 1), MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbbL, 0x187863573844154aL, "operator"));
                }
              }
            }
            if (column == 0 && row > 0 && (row <= ListSequence.fromList(voorwaarden).count())) {
              return SLinkOperations.getTarget(ListSequence.fromList(voorwaarden).getElement(row - 1), MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbbL, 0x5c5bf80e46c3b9d9L, "operand"));
            }
            if (column == 0 && row > 0 && (row > ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).count())) {
              return SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x5a9ee06c9e98068bL, 0x5a9ee06c9e98068cL, "regels"))).getElement(row - ListSequence.fromList(voorwaarden).count() - 1), MetaAdapterFactory.getContainmentLink(0x6d5fd5261cea4e31L, 0xab59ad955823700cL, 0x7b09cf0db9d86bbaL, 0x7b09cf0db9d86bc7L, "actie"));
            }
            return null;
          }
          @Override
          public void createElement(int row, int column) {
            if (row > 0 && column > 0) {
            }
          }
          @Override
          public void insertColumn(int columnNumber) {
            if (columnNumber <= 0) {
              return;
            }
          }
          @Override
          public void insertRow(int rowNumber) {
            if (rowNumber <= 0) {
              return;
            }
          }
          @Override
          public void deleteColumn(int columnNumber) {
            if (columnNumber <= 0) {
              return;
            }
          }
          @Override
          public void deleteRow(int rowNumber) {
            if (rowNumber <= 0) {
              return;
            }
          }
        };
      }
    };
    jetbrains.mps.openapi.editor.cells.EditorCell_Collection editorCell = EditorCell_Table.createTable(editorContext, node, creator.createTableModel(node, editorContext), "Table_j8incd_a2a");
    editorCell.setCellId("Table_j8incd_a2a_0");
    return editorCell;
  }
  private EditorCell createConstant_j8incd_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_j8incd_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  protected static Logger LOG = LogManager.getLogger(Regelgroep_Tabel_Editor.class);
}
